                                                    MODULE: 5 (Database)

Q: What do you understand By Database ?

A- Database is a collection of inter-related data and Management System is a set of programs to store and retrieve those data.

    > DBMS stands for Data Base Management System.

    > Database is a collection of inter-related data and Management System is a set of programs to store and retrieve those data.

    > DBMS is a collection of inter-related data and set of programs to store & access those data in an easy and effective manner.
 
    > For Example, university database organizes the data about students, faculty, and admin staff etc. which helps in efficient retrieval,     
       insertion and deletion of data from it

Q: What is Normalization?

A- Normalization is the process of minimizing redundancy (duplicity) from a relation or set of relations. Redundancy in relation may cause
    insertion, deletion and updation anomalies. So, it helps to minimize the redundancy in relations.

  Most Commonly used normal forms:

  > First normal form(1NF)

  > Second normal form(2NF)

  > Third normal form(3NF)

  > Boyce & Codd normal form (BCNF)

Q: What is Difference between DBMS and RDBMS?
A- Database Management System (DBMS) is a software that is used to define, create and maintain a database and provides controlled access to 
the data.
Relational Database Management System RDBMS is an advanced version of a DBMS.

1-DBMS:
> DBMS stores data as file.
> Data elements need to access individually.
> No relationship between data.
> Normalization is not present.
> DBMS does not support distributed database.
> It stores data in either a navigational or hierarchical form.
> It deals with small quantity of data.
> Data redundancy is common in this model.
> It is used for small organization and deal with small data.
> It supports single user.
> Data fetching is slower for the large amount of data.
> The data in a DBMS is subject to low security levels with regards to data manipulation.
> Low software and hardware necessities.
> Examples: XML, Window Registry, etc.

2- RDBMS:
> RDBMS stores data in tabular form.
> Multiple data elements can be accessed at the same time.
> Data is stored in the form of tables which are related to each other.
> Normalization is present.
> RDBMS supports distributed database.
> It uses a tabular structure where the headers are the column names, and the rows contain corresponding values.
> It deals with large amount of data.
> Keys and indexes do not allow Data redundancy.
> It is used to handle large amount of data.
> It supports multiple users.
> Data fetching is fast because of relational approach.
> There exists multiple levels of data security in a RDBMS.
> Higher software and hardware necessities.
> Examples: MySQL, PostgreSQL, SQL Server, Oracle, Microsoft Access etc.

Q: What do you understand By Data Redundancy?

A- Data redundancy occurs when the same piece of data is stored in two or more separate places and is a common occurrence in many 
   businesses. As more companies are moving away from siloed data to using a central repository to store information, they are finding
   that their database is filled with inconsistent duplicates of the same entry. Although it can be challenging to reconcile — or even 
   benefit from — duplicate data entries, understanding how to reduce and track data redundancy efficiently can help mitigate long-term    inconsistency issues for your business. Data redundancy can be found in a database, which is an organized collection of structured
   data that’s stored by a computer system or the cloud. A retailer may have a database to track the products they stock. If the same 
   product gets entered twice by mistake, data redundancy takes place. 

   The same retailer may keep customer files in a file storage system. If a customer purchases from the company more than once,
   their name may be entered multiple times. Duplicate entries of the customer name is considered redundant data.

Q: What is DDL Interpreter?

A- Data Definition Language (DDL) is used to create and modify the structure of objects in a database using predefined commands and a 
   specific syntax. These database objects include tables, sequences, locations, aliases, schemas and indexes.

    Commands:

>   CREATE - Creates a new table, a view of a table, or other object in database.

>   ALTER - Modifies an existing database object, such as a table.

>   DROP - Deletes an entire table, a view of a table or other object in the database.

Q: What is DML Compiler in SQL?

A- DML stands for Data Manipulation Language. Tables and formulas are helpful when communicating with data stored up to a point in a
   database through SQL, but a time comes when we actually want to execute some fairly complicated data interactions. We will also need
   the Data Manipulation Language in that situation.
   DML is a way to inform a database precisely what we want it to do by conversing in a manner that it has been built to comprehend from
   the scratch. When it comes to interacting within existing data, whether adding, moving, or deleting data, it provides a convenient way
   to do so. Data manipulation includes introducing data into tables, altering the table’s data and deleting the data from the table.

Q: What is SQL Key Constraints writing an Example of SQL Key Constraints?

A- SQL constraints are used to specify rules for the data in a table.
   Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the 
   table. If there is any violation between the constraint and the data action, the action is aborted.

  The following constraints are commonly used in SQL: · NOT NULL - Ensures that a column cannot have a NULL value · UNIQUE - Ensures that
  all values in a column are different · PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table ·
  FOREIGN KEY - Prevents actions that would destroy links between tables · CHECK - Ensures that the values in a column satisfies a 
  specific condition · DEFAULT - Sets a default value for a column if no value is specified.
·
· CREATE TABLE Student
· (
· ID int(6) NOT NULL UNIQUE,
· NAME varchar(10),
· ADDRESS varchar(20),
· PRIMARY KEY(ID)
· );

Q: What is save Point? How to create a save Point write a Query?

A- A SAVEPOINT is a point in a transaction when you can roll the transaction back to a certain point without rolling back the entire      transaction.
   The syntax for a SAVEPOINT command is as shown below.

    SAVEPOINT SAVEPOINT_NAME;

   This command serves only in the creation of a SAVEPOINT among all the transactional statements. The ROLLBACK command is used to undo a group    of transactions.

   The syntax for rolling back to a SAVEPOINT is as shown below.

   ROLLBACK TO SAVEPOINT_NAME;

  Query:-

 START TRANSACTION;

 SAVEPOINT ini;

INSERT INTO student VALUES (9, "sushant singh rajput", 34, "delhi", "1986-01-21");

ROLLBACK TO ini ;

Q: What is trigger and how to create a Trigger in SQL?

A- Trigger is a statement that a system executes automatically when there is any modification to the database. In a trigger, we first specify    when the trigger is to be executed and then the action to be performed when the trigger
   executes. Triggers are used to specify certain integrity constraints and referential constraints that cannot be specified using the    constraint mechanism of SQL.

   Create trigger in SQL

   delimiter $$

   CREATE TRIGGER Check_age BEFORE INSERT ON employee
   FOR EACH ROW
   BEGIN

  IF NEW.age < 22 THEN

 SIGNAL SQLSTATE '25000'

 SET MESSAGE_TEXT = 'ERROR:

 AGE MUST BE ATLEAST 22 YEARS!';

 END IF;

 END; $$

 delimiter;
  

   
